// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

type Queue_Expecter struct {
	mock *mock.Mock
}

func (_m *Queue) EXPECT() *Queue_Expecter {
	return &Queue_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Queue) Close() {
	_m.Called()
}

// Queue_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Queue_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Queue_Expecter) Close() *Queue_Close_Call {
	return &Queue_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Queue_Close_Call) Run(run func()) *Queue_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Queue_Close_Call) Return() *Queue_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Queue_Close_Call) RunAndReturn(run func()) *Queue_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessage provides a mock function with given fields: ctx
func (_m *Queue) GetMessage(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Queue_GetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessage'
type Queue_GetMessage_Call struct {
	*mock.Call
}

// GetMessage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Queue_Expecter) GetMessage(ctx interface{}) *Queue_GetMessage_Call {
	return &Queue_GetMessage_Call{Call: _e.mock.On("GetMessage", ctx)}
}

func (_c *Queue_GetMessage_Call) Run(run func(ctx context.Context)) *Queue_GetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Queue_GetMessage_Call) Return(_a0 string, _a1 error) *Queue_GetMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Queue_GetMessage_Call) RunAndReturn(run func(context.Context) (string, error)) *Queue_GetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// PutMessage provides a mock function with given fields: ctx, message
func (_m *Queue) PutMessage(ctx context.Context, message string) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for PutMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Queue_PutMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMessage'
type Queue_PutMessage_Call struct {
	*mock.Call
}

// PutMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
func (_e *Queue_Expecter) PutMessage(ctx interface{}, message interface{}) *Queue_PutMessage_Call {
	return &Queue_PutMessage_Call{Call: _e.mock.On("PutMessage", ctx, message)}
}

func (_c *Queue_PutMessage_Call) Run(run func(ctx context.Context, message string)) *Queue_PutMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Queue_PutMessage_Call) Return(_a0 error) *Queue_PutMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Queue_PutMessage_Call) RunAndReturn(run func(context.Context, string) error) *Queue_PutMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
