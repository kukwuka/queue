// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Queues is an autogenerated mock type for the Queues type
type Queues struct {
	mock.Mock
}

type Queues_Expecter struct {
	mock *mock.Mock
}

func (_m *Queues) EXPECT() *Queues_Expecter {
	return &Queues_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Queues) Close() {
	_m.Called()
}

// Queues_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Queues_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Queues_Expecter) Close() *Queues_Close_Call {
	return &Queues_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Queues_Close_Call) Run(run func()) *Queues_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Queues_Close_Call) Return() *Queues_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Queues_Close_Call) RunAndReturn(run func()) *Queues_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageFromQueue provides a mock function with given fields: ctx, queueName
func (_m *Queues) GetMessageFromQueue(ctx context.Context, queueName string) (string, error) {
	ret := _m.Called(ctx, queueName)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageFromQueue")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, queueName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, queueName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, queueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Queues_GetMessageFromQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageFromQueue'
type Queues_GetMessageFromQueue_Call struct {
	*mock.Call
}

// GetMessageFromQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
func (_e *Queues_Expecter) GetMessageFromQueue(ctx interface{}, queueName interface{}) *Queues_GetMessageFromQueue_Call {
	return &Queues_GetMessageFromQueue_Call{Call: _e.mock.On("GetMessageFromQueue", ctx, queueName)}
}

func (_c *Queues_GetMessageFromQueue_Call) Run(run func(ctx context.Context, queueName string)) *Queues_GetMessageFromQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Queues_GetMessageFromQueue_Call) Return(_a0 string, _a1 error) *Queues_GetMessageFromQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Queues_GetMessageFromQueue_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Queues_GetMessageFromQueue_Call {
	_c.Call.Return(run)
	return _c
}

// PutMessageToQueue provides a mock function with given fields: ctx, queueName, message
func (_m *Queues) PutMessageToQueue(ctx context.Context, queueName string, message string) error {
	ret := _m.Called(ctx, queueName, message)

	if len(ret) == 0 {
		panic("no return value specified for PutMessageToQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, queueName, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Queues_PutMessageToQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMessageToQueue'
type Queues_PutMessageToQueue_Call struct {
	*mock.Call
}

// PutMessageToQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - message string
func (_e *Queues_Expecter) PutMessageToQueue(ctx interface{}, queueName interface{}, message interface{}) *Queues_PutMessageToQueue_Call {
	return &Queues_PutMessageToQueue_Call{Call: _e.mock.On("PutMessageToQueue", ctx, queueName, message)}
}

func (_c *Queues_PutMessageToQueue_Call) Run(run func(ctx context.Context, queueName string, message string)) *Queues_PutMessageToQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Queues_PutMessageToQueue_Call) Return(_a0 error) *Queues_PutMessageToQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Queues_PutMessageToQueue_Call) RunAndReturn(run func(context.Context, string, string) error) *Queues_PutMessageToQueue_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueues creates a new instance of Queues. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueues(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queues {
	mock := &Queues{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
