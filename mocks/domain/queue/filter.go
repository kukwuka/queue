// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// filter is an autogenerated mock type for the filter type
type filter[T interface{}] struct {
	mock.Mock
}

type filter_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *filter[T]) EXPECT() *filter_Expecter[T] {
	return &filter_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: input
func (_m *filter[T]) Execute(input T) bool {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(T) bool); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// filter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type filter_Execute_Call[T interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - input T
func (_e *filter_Expecter[T]) Execute(input interface{}) *filter_Execute_Call[T] {
	return &filter_Execute_Call[T]{Call: _e.mock.On("Execute", input)}
}

func (_c *filter_Execute_Call[T]) Run(run func(input T)) *filter_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *filter_Execute_Call[T]) Return(_a0 bool) *filter_Execute_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *filter_Execute_Call[T]) RunAndReturn(run func(T) bool) *filter_Execute_Call[T] {
	_c.Call.Return(run)
	return _c
}

// newFilter creates a new instance of filter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newFilter[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *filter[T] {
	mock := &filter[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
